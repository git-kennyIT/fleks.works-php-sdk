<?php
/**
 * EmployeesAddEmployeesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fleks-Plan API
 *
 * # Introduction  This is the main API of the Fleks - Plan database and can be used by clients and developers to interact with their own applications or integrations like powerBI.  # What is a REST API ?    The REST API is a way to retrieve data programmatically in a widely established data format called JSON  The 4 important parts of a request are:    - The endpoint   - The headers   - The method   - The data        # How to consume this API ?  ### To request data   - click on \"Authentication\" on the sidebar and enter your API key in the input box   - click \"SET\"   - click \"TRY\" on any of the endpoints available in the sidebar    *The key will be saved for each subsequent request when using the web frontend for ease-of-use*  # Data format  The data will be a **JSON object** with 2 keys named **meta** and **results**  <br/><br/>  ```javascript {    \"meta\": {     \"rows\": 5,     \"page\": 1,     // etc...   },   \"results\" : [     {       \"id\" : 1,       \"name\" : \"bob\"       // etc...     }   ] } ```   ## meta   - contains an object with metadata and pagination info  ## results   - contains the array of objects with the actual query results  ---    ### Developers who want to use postman or cURL:  ```javascript   https://api.fleks.works/v1/{endpoint}   curl -X GET https://api.fleks.works/v1/{endpoint} -H \"X-API-KEY: {your_api_key}\"   ```   ### Make sure to set the headers correctly if you have any issues:    ```javascript   'Content-Type': 'application/json'   'X-API-KEY': {your_api_key}  ```   ### While it's technically safe over SSL to put a key as a query parameter, the URL is visible and logged on client and server, and as such this method is *not recommended*     ```javascript   Not Recommended   https://api.fleks.works/v1/{endpoint}?X-API-KEY={your_api_key}  ```  # On Rate limiting  ### We have rate limiting in place to protect our servers and your data from brute force attacks or developer mistakes that might overload the server.
 *
 * The version of the OpenAPI document: 0.1.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmployeesAddEmployeesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeesAddEmployeesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'employeesAddEmployees_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'custom_number' => 'string',
        'initial' => 'string',
        'first_name' => 'string',
        'surname_prefix' => 'string',
        'surname' => 'string',
        'birth_date' => 'string',
        'gender' => 'string',
        'personal_number' => 'string',
        'address' => 'string',
        'city' => 'string',
        'post_code' => 'string',
        'contract_name' => 'string',
        'contract_start_date' => 'string',
        'contract_end_date' => 'string',
        'job_categories' => 'string',
        'license' => 'string',
        'bank_acc_number' => 'string',
        'document_number' => 'string',
        'social_number' => 'string',
        'expiry_date' => 'string',
        'height' => 'float',
        'shirt_size' => 'string',
        'shoe_size' => 'float',
        'wage_tax_rebate' => 'string',
        'wage_tax_rebate_date' => 'string',
        'education' => 'string',
        'piercings_tattoos' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'custom_number' => null,
        'initial' => null,
        'first_name' => null,
        'surname_prefix' => null,
        'surname' => null,
        'birth_date' => null,
        'gender' => null,
        'personal_number' => null,
        'address' => null,
        'city' => null,
        'post_code' => null,
        'contract_name' => null,
        'contract_start_date' => null,
        'contract_end_date' => null,
        'job_categories' => null,
        'license' => null,
        'bank_acc_number' => null,
        'document_number' => null,
        'social_number' => null,
        'expiry_date' => null,
        'height' => null,
        'shirt_size' => null,
        'shoe_size' => null,
        'wage_tax_rebate' => null,
        'wage_tax_rebate_date' => null,
        'education' => null,
        'piercings_tattoos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
		'custom_number' => false,
		'initial' => false,
		'first_name' => false,
		'surname_prefix' => false,
		'surname' => false,
		'birth_date' => false,
		'gender' => false,
		'personal_number' => false,
		'address' => false,
		'city' => false,
		'post_code' => false,
		'contract_name' => false,
		'contract_start_date' => false,
		'contract_end_date' => false,
		'job_categories' => false,
		'license' => false,
		'bank_acc_number' => false,
		'document_number' => false,
		'social_number' => false,
		'expiry_date' => false,
		'height' => false,
		'shirt_size' => false,
		'shoe_size' => false,
		'wage_tax_rebate' => false,
		'wage_tax_rebate_date' => false,
		'education' => false,
		'piercings_tattoos' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'custom_number' => 'custom_number',
        'initial' => 'initial',
        'first_name' => 'first_name',
        'surname_prefix' => 'surname_prefix',
        'surname' => 'surname',
        'birth_date' => 'birth_date',
        'gender' => 'gender',
        'personal_number' => 'personal_number',
        'address' => 'address',
        'city' => 'city',
        'post_code' => 'post_code',
        'contract_name' => 'contract_name',
        'contract_start_date' => 'contract_start_date',
        'contract_end_date' => 'contract_end_date',
        'job_categories' => 'job_categories',
        'license' => 'license',
        'bank_acc_number' => 'bank_acc_number',
        'document_number' => 'document_number',
        'social_number' => 'social_number',
        'expiry_date' => 'expiry_date',
        'height' => 'height',
        'shirt_size' => 'shirt_size',
        'shoe_size' => 'shoe_size',
        'wage_tax_rebate' => 'wage_tax_rebate',
        'wage_tax_rebate_date' => 'wage_tax_rebate_date',
        'education' => 'education',
        'piercings_tattoos' => 'piercings_tattoos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'custom_number' => 'setCustomNumber',
        'initial' => 'setInitial',
        'first_name' => 'setFirstName',
        'surname_prefix' => 'setSurnamePrefix',
        'surname' => 'setSurname',
        'birth_date' => 'setBirthDate',
        'gender' => 'setGender',
        'personal_number' => 'setPersonalNumber',
        'address' => 'setAddress',
        'city' => 'setCity',
        'post_code' => 'setPostCode',
        'contract_name' => 'setContractName',
        'contract_start_date' => 'setContractStartDate',
        'contract_end_date' => 'setContractEndDate',
        'job_categories' => 'setJobCategories',
        'license' => 'setLicense',
        'bank_acc_number' => 'setBankAccNumber',
        'document_number' => 'setDocumentNumber',
        'social_number' => 'setSocialNumber',
        'expiry_date' => 'setExpiryDate',
        'height' => 'setHeight',
        'shirt_size' => 'setShirtSize',
        'shoe_size' => 'setShoeSize',
        'wage_tax_rebate' => 'setWageTaxRebate',
        'wage_tax_rebate_date' => 'setWageTaxRebateDate',
        'education' => 'setEducation',
        'piercings_tattoos' => 'setPiercingsTattoos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'custom_number' => 'getCustomNumber',
        'initial' => 'getInitial',
        'first_name' => 'getFirstName',
        'surname_prefix' => 'getSurnamePrefix',
        'surname' => 'getSurname',
        'birth_date' => 'getBirthDate',
        'gender' => 'getGender',
        'personal_number' => 'getPersonalNumber',
        'address' => 'getAddress',
        'city' => 'getCity',
        'post_code' => 'getPostCode',
        'contract_name' => 'getContractName',
        'contract_start_date' => 'getContractStartDate',
        'contract_end_date' => 'getContractEndDate',
        'job_categories' => 'getJobCategories',
        'license' => 'getLicense',
        'bank_acc_number' => 'getBankAccNumber',
        'document_number' => 'getDocumentNumber',
        'social_number' => 'getSocialNumber',
        'expiry_date' => 'getExpiryDate',
        'height' => 'getHeight',
        'shirt_size' => 'getShirtSize',
        'shoe_size' => 'getShoeSize',
        'wage_tax_rebate' => 'getWageTaxRebate',
        'wage_tax_rebate_date' => 'getWageTaxRebateDate',
        'education' => 'getEducation',
        'piercings_tattoos' => 'getPiercingsTattoos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('custom_number', $data ?? [], null);
        $this->setIfExists('initial', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname_prefix', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('personal_number', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('contract_name', $data ?? [], null);
        $this->setIfExists('contract_start_date', $data ?? [], null);
        $this->setIfExists('contract_end_date', $data ?? [], null);
        $this->setIfExists('job_categories', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('bank_acc_number', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('social_number', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('shirt_size', $data ?? [], null);
        $this->setIfExists('shoe_size', $data ?? [], null);
        $this->setIfExists('wage_tax_rebate', $data ?? [], null);
        $this->setIfExists('wage_tax_rebate_date', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('piercings_tattoos', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets custom_number
     *
     * @return string|null
     */
    public function getCustomNumber()
    {
        return $this->container['custom_number'];
    }

    /**
     * Sets custom_number
     *
     * @param string|null $custom_number custom_number
     *
     * @return self
     */
    public function setCustomNumber($custom_number)
    {

        if (is_null($custom_number)) {
            throw new \InvalidArgumentException('non-nullable custom_number cannot be null');
        }

        $this->container['custom_number'] = $custom_number;

        return $this;
    }

    /**
     * Gets initial
     *
     * @return string|null
     */
    public function getInitial()
    {
        return $this->container['initial'];
    }

    /**
     * Sets initial
     *
     * @param string|null $initial initial
     *
     * @return self
     */
    public function setInitial($initial)
    {

        if (is_null($initial)) {
            throw new \InvalidArgumentException('non-nullable initial cannot be null');
        }

        $this->container['initial'] = $initial;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname_prefix
     *
     * @return string|null
     */
    public function getSurnamePrefix()
    {
        return $this->container['surname_prefix'];
    }

    /**
     * Sets surname_prefix
     *
     * @param string|null $surname_prefix surname_prefix
     *
     * @return self
     */
    public function setSurnamePrefix($surname_prefix)
    {

        if (is_null($surname_prefix)) {
            throw new \InvalidArgumentException('non-nullable surname_prefix cannot be null');
        }

        $this->container['surname_prefix'] = $surname_prefix;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {

        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {

        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }

        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets personal_number
     *
     * @return string|null
     */
    public function getPersonalNumber()
    {
        return $this->container['personal_number'];
    }

    /**
     * Sets personal_number
     *
     * @param string|null $personal_number personal_number
     *
     * @return self
     */
    public function setPersonalNumber($personal_number)
    {

        if (is_null($personal_number)) {
            throw new \InvalidArgumentException('non-nullable personal_number cannot be null');
        }

        $this->container['personal_number'] = $personal_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {

        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets contract_name
     *
     * @return string|null
     */
    public function getContractName()
    {
        return $this->container['contract_name'];
    }

    /**
     * Sets contract_name
     *
     * @param string|null $contract_name contract_name
     *
     * @return self
     */
    public function setContractName($contract_name)
    {

        if (is_null($contract_name)) {
            throw new \InvalidArgumentException('non-nullable contract_name cannot be null');
        }

        $this->container['contract_name'] = $contract_name;

        return $this;
    }

    /**
     * Gets contract_start_date
     *
     * @return string|null
     */
    public function getContractStartDate()
    {
        return $this->container['contract_start_date'];
    }

    /**
     * Sets contract_start_date
     *
     * @param string|null $contract_start_date contract_start_date
     *
     * @return self
     */
    public function setContractStartDate($contract_start_date)
    {

        if (is_null($contract_start_date)) {
            throw new \InvalidArgumentException('non-nullable contract_start_date cannot be null');
        }

        $this->container['contract_start_date'] = $contract_start_date;

        return $this;
    }

    /**
     * Gets contract_end_date
     *
     * @return string|null
     */
    public function getContractEndDate()
    {
        return $this->container['contract_end_date'];
    }

    /**
     * Sets contract_end_date
     *
     * @param string|null $contract_end_date contract_end_date
     *
     * @return self
     */
    public function setContractEndDate($contract_end_date)
    {

        if (is_null($contract_end_date)) {
            throw new \InvalidArgumentException('non-nullable contract_end_date cannot be null');
        }

        $this->container['contract_end_date'] = $contract_end_date;

        return $this;
    }

    /**
     * Gets job_categories
     *
     * @return string|null
     */
    public function getJobCategories()
    {
        return $this->container['job_categories'];
    }

    /**
     * Sets job_categories
     *
     * @param string|null $job_categories job_categories
     *
     * @return self
     */
    public function setJobCategories($job_categories)
    {

        if (is_null($job_categories)) {
            throw new \InvalidArgumentException('non-nullable job_categories cannot be null');
        }

        $this->container['job_categories'] = $job_categories;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {

        if (is_null($license)) {
            throw new \InvalidArgumentException('non-nullable license cannot be null');
        }

        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets bank_acc_number
     *
     * @return string|null
     */
    public function getBankAccNumber()
    {
        return $this->container['bank_acc_number'];
    }

    /**
     * Sets bank_acc_number
     *
     * @param string|null $bank_acc_number bank_acc_number
     *
     * @return self
     */
    public function setBankAccNumber($bank_acc_number)
    {

        if (is_null($bank_acc_number)) {
            throw new \InvalidArgumentException('non-nullable bank_acc_number cannot be null');
        }

        $this->container['bank_acc_number'] = $bank_acc_number;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number document_number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {

        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets social_number
     *
     * @return string|null
     */
    public function getSocialNumber()
    {
        return $this->container['social_number'];
    }

    /**
     * Sets social_number
     *
     * @param string|null $social_number social_number
     *
     * @return self
     */
    public function setSocialNumber($social_number)
    {

        if (is_null($social_number)) {
            throw new \InvalidArgumentException('non-nullable social_number cannot be null');
        }

        $this->container['social_number'] = $social_number;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string|null $expiry_date expiry_date
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {

        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }

        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets shirt_size
     *
     * @return string|null
     */
    public function getShirtSize()
    {
        return $this->container['shirt_size'];
    }

    /**
     * Sets shirt_size
     *
     * @param string|null $shirt_size shirt_size
     *
     * @return self
     */
    public function setShirtSize($shirt_size)
    {

        if (is_null($shirt_size)) {
            throw new \InvalidArgumentException('non-nullable shirt_size cannot be null');
        }

        $this->container['shirt_size'] = $shirt_size;

        return $this;
    }

    /**
     * Gets shoe_size
     *
     * @return float|null
     */
    public function getShoeSize()
    {
        return $this->container['shoe_size'];
    }

    /**
     * Sets shoe_size
     *
     * @param float|null $shoe_size shoe_size
     *
     * @return self
     */
    public function setShoeSize($shoe_size)
    {

        if (is_null($shoe_size)) {
            throw new \InvalidArgumentException('non-nullable shoe_size cannot be null');
        }

        $this->container['shoe_size'] = $shoe_size;

        return $this;
    }

    /**
     * Gets wage_tax_rebate
     *
     * @return string|null
     */
    public function getWageTaxRebate()
    {
        return $this->container['wage_tax_rebate'];
    }

    /**
     * Sets wage_tax_rebate
     *
     * @param string|null $wage_tax_rebate wage_tax_rebate
     *
     * @return self
     */
    public function setWageTaxRebate($wage_tax_rebate)
    {

        if (is_null($wage_tax_rebate)) {
            throw new \InvalidArgumentException('non-nullable wage_tax_rebate cannot be null');
        }

        $this->container['wage_tax_rebate'] = $wage_tax_rebate;

        return $this;
    }

    /**
     * Gets wage_tax_rebate_date
     *
     * @return string|null
     */
    public function getWageTaxRebateDate()
    {
        return $this->container['wage_tax_rebate_date'];
    }

    /**
     * Sets wage_tax_rebate_date
     *
     * @param string|null $wage_tax_rebate_date wage_tax_rebate_date
     *
     * @return self
     */
    public function setWageTaxRebateDate($wage_tax_rebate_date)
    {

        if (is_null($wage_tax_rebate_date)) {
            throw new \InvalidArgumentException('non-nullable wage_tax_rebate_date cannot be null');
        }

        $this->container['wage_tax_rebate_date'] = $wage_tax_rebate_date;

        return $this;
    }

    /**
     * Gets education
     *
     * @return string|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param string|null $education education
     *
     * @return self
     */
    public function setEducation($education)
    {

        if (is_null($education)) {
            throw new \InvalidArgumentException('non-nullable education cannot be null');
        }

        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets piercings_tattoos
     *
     * @return string|null
     */
    public function getPiercingsTattoos()
    {
        return $this->container['piercings_tattoos'];
    }

    /**
     * Sets piercings_tattoos
     *
     * @param string|null $piercings_tattoos piercings_tattoos
     *
     * @return self
     */
    public function setPiercingsTattoos($piercings_tattoos)
    {

        if (is_null($piercings_tattoos)) {
            throw new \InvalidArgumentException('non-nullable piercings_tattoos cannot be null');
        }

        $this->container['piercings_tattoos'] = $piercings_tattoos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


